var xsltFO2HTMLObj = '<?xml version=\'1.0\' encoding=\'ISO-8859-1\'?>\r\n\r\n<!-- =============================================================== -->\r\n<!--                                                                 -->\r\n<!-- Convert XSL FO (as in REC 2001-10-15) to HTML                    -->\r\n<!--                                                                 -->\r\n<!-- \u00A9 RenderX 2000-2001                                             -->\r\n<!-- Permission to copy and modify is granted, provided this notice  -->\r\n<!-- is included in all copies and\/or derived work.                  -->\r\n<!--                                                                 -->\r\n<!-- Author: Nikolai Grigoriev, grig@renderx.com                     -->\r\n<!--                                                                 -->\r\n<!-- =============================================================== -->\r\n\r\n\r\n<!DOCTYPE xsl:stylesheet [\r\n  <!ENTITY anchor \"<xsl:apply-templates select=\'@id\' xmlns:xsl=\'http:\/\/www.w3.org\/1999\/XSL\/Transform\'\/>\">\r\n  <!ENTITY add-style \"<xsl:call-template name=\'add-style-attribute\' xmlns:xsl=\'http:\/\/www.w3.org\/1999\/XSL\/Transform\'\/>\">\r\n]>\r\n\r\n<xsl:stylesheet version=\"1.0\"\r\n                xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\r\n                xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\"\r\n                exclude-result-prefixes=\"fo\">\r\n\r\n<xsl:output method=\"html\"\r\n            version=\"4.0\"\r\n            encoding=\"utf-8\"\r\n            doctype-public=\"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\"\r\n            indent=\"no\"\/>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Root. Create the bone and call templates for each page sequence -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:root\">\r\n  <html>\r\n    <head>\r\n      <title>\r\n        <xsl:choose>\r\n          <xsl:when test=\"descendant::fo:title[1]\">\r\n            <xsl:value-of select=\"fo:title\"\/>\r\n          <\/xsl:when>\r\n          <xsl:otherwise>XSL FO Document<\/xsl:otherwise>\r\n        <\/xsl:choose>\r\n      <\/title>\r\n      <META http-equiv=\"Content-Style-Type\" content=\"text\/css\"\/>\r\n      <style type=\"text\/css\">\r\n        a { color: black; border: none; text-decoration: none; }\r\n        img { border: none; }\r\n      <\/style>\r\n    <\/head>\r\n\r\n    <body bgcolor=\"white\" marginwidth=\"6\" marginheight=\"6\" leftmargin=\"6\" topmargin=\"6\">\r\n      <xsl:apply-templates select=\"fo:page-sequence\"\/>\r\n    <\/body>\r\n  <\/html>\r\n\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:page-sequence. Draws a header before and a footer after.     -->\r\n<!-- Sidebars are skipped: there\'s no way to rotate the text in HTML -->\r\n<!-- and horizontal text in the sidebars eats up too much space.     -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:page-sequence\">\r\n\r\n    <xsl:variable name=\"current-master\"><xsl:value-of select=\"@master-reference\"\/><\/xsl:variable>\r\n\r\n    <!-- One page master will be used for the whole page sequence -->\r\n    <xsl:variable name=\"page-master-name\">\r\n      <xsl:choose>\r\n        <xsl:when test=\"..\/fo:layout-master-set\/fo:simple-page-master[@master-name=$current-master]\">\r\n          <!-- specified master is a page master: use it -->\r\n          <xsl:value-of select=\"$current-master\"\/>\r\n        <\/xsl:when>\r\n        <xsl:otherwise>\r\n          <!-- specified master is a page sequence master: -->\r\n          <!-- find master name for the first page -->\r\n          <xsl:apply-templates select=\"..\/fo:layout-master-set\/fo:page-sequence-master[@master-name=$current-master]\"\/>\r\n        <\/xsl:otherwise>\r\n      <\/xsl:choose>\r\n    <\/xsl:variable>\r\n\r\n    <!-- Load the page master into a variable. No problem if it\'s null; should work the same ;-) -->\r\n    <xsl:variable name=\"page-master\" select=\"..\/fo:layout-master-set\/fo:simple-page-master[@master-name=$page-master-name]\"\/>\r\n\r\n\r\n    <!-- Start real drawing -->\r\n    <br\/>  <!-- make an offset before each page sequence -->\r\n\r\n    <!-- Header -->\r\n    <xsl:variable name=\"header-region\" select=\"$page-master\/fo:region-before\"\/>\r\n    <xsl:apply-templates select=\"fo:static-content[@flow-name = $header-region\/@region-name\r\n                              or (@flow-name=\'xsl-region-before\' and not($header-region\/@region-name))]\">\r\n      <xsl:with-param name=\"region\" select=\"$header-region\"\/>\r\n    <\/xsl:apply-templates>\r\n\r\n    <!-- Body -->\r\n    <xsl:apply-templates select=\"fo:flow\">\r\n      <xsl:with-param name=\"region\" select=\"$page-master\/fo:region-body\"\/>\r\n    <\/xsl:apply-templates>\r\n\r\n    <!-- Footer -->\r\n    <xsl:variable name=\"footer-region\" select=\"$page-master\/fo:region-after\"\/>\r\n    <xsl:apply-templates select=\"fo:static-content[@flow-name = $footer-region\/@region-name\r\n                              or (@flow-name=\'xsl-region-after\' and not($footer-region\/@region-name))]\">\r\n      <xsl:with-param name=\"region\" select=\"$footer-region\"\/>\r\n    <\/xsl:apply-templates>\r\n\r\n    <br\/>  <!-- make an offset after each page sequence -->\r\n\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:block                                                        -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:block\">\r\n  &anchor;<div>&add-style;<xsl:apply-templates mode=\"check-for-pre\"\/><\/div>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:inline-sequence                                              -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:inline | fo:wrapper\">\r\n  &anchor;<span>&add-style;<xsl:apply-templates\/><\/span>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:list-block                                                   -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:list-block\">\r\n  <xsl:variable name=\"label-separation\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"@provisional-label-separation\">\r\n        <xsl:apply-templates select=\"@provisional-label-separation\"\r\n                             mode=\"convert-to-pixels\"\/>\r\n      <\/xsl:when>\r\n      <xsl:otherwise>8<\/xsl:otherwise>\r\n    <\/xsl:choose>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:variable name=\"body-offset\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"@provisional-distance-between-starts\">\r\n        <xsl:apply-templates select=\"@provisional-distance-between-starts\"\r\n                             mode=\"convert-to-pixels\"\/>\r\n      <\/xsl:when>\r\n      <xsl:otherwise>32<\/xsl:otherwise>\r\n    <\/xsl:choose>\r\n  <\/xsl:variable>\r\n\r\n  <div>&add-style;\r\n    &anchor;\r\n    <table width=\"100%\">\r\n      <xsl:apply-templates select=\"fo:list-item | fo:list-item-label\">\r\n        <xsl:with-param name=\"label-width\"\r\n                        select=\"$body-offset - $label-separation\"\/>\r\n        <xsl:with-param name=\"gap-width\"\r\n                        select=\"$label-separation\"\/>\r\n      <\/xsl:apply-templates>\r\n    <\/table>\r\n  <\/div>\r\n\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:list-item                                                    -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:list-item\">\r\n  <xsl:param name=\"label-width\"\/>\r\n  <xsl:param name=\"gap-width\"\/>\r\n\r\n  <tr>&add-style;\r\n    <xsl:apply-templates select=\"fo:list-item-label\" mode=\"draw-cell\">\r\n       <xsl:with-param name=\"width\" select=\"$label-width\"\/>\r\n    <\/xsl:apply-templates>\r\n    <xsl:if test=\"$gap-width &gt; 0\">\r\n      <td width=\"{$gap-width}\">&#160;<\/td>\r\n    <\/xsl:if>\r\n\r\n    <xsl:apply-templates select=\"fo:list-item-body\" mode=\"draw-cell\"\/>\r\n  <\/tr>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:list-item-label - itemless lists                             -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:list-block\/fo:list-item-label\">\r\n  <xsl:param name=\"label-width\"\/>\r\n  <xsl:param name=\"gap-width\"\/>\r\n\r\n  <tr>\r\n    <xsl:apply-templates select=\".\" mode=\"draw-cell\">\r\n       <xsl:with-param name=\"width\" select=\"$label-width\"\/>\r\n    <\/xsl:apply-templates>\r\n    <xsl:if test=\"$gap-width &gt; 0\">\r\n      <td width=\"{$gap-width}\">&#160;<\/td>\r\n    <\/xsl:if>\r\n\r\n    <xsl:apply-templates select=\"following-sibling::fo:list-item-body[1]\" mode=\"draw-cell\"\/>\r\n  <\/tr>\r\n<\/xsl:template>\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:list-item-body - itemless lists                              -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:list-item-label | fo:list-item-body\" mode=\"draw-cell\">\r\n  <xsl:param name=\"width\" select=\"\'auto\'\"\/>\r\n  <td valign=\"top\">&add-style;&anchor;\r\n    <xsl:if test=\"$width != \'auto\'\">\r\n      <xsl:attribute name=\"width\">\r\n        <xsl:value-of select=\"$width\"\/>\r\n      <\/xsl:attribute>\r\n    <\/xsl:if>\r\n\r\n    <xsl:apply-templates mode=\"check-for-pre\"\/>\r\n  <\/td>\r\n<\/xsl:template>\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:table and its components                                     -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:table\">\r\n  &anchor;\r\n  <table>&add-style;\r\n    <xsl:if test=\"not(@display-align)\">\r\n      <xsl:attribute name=\"valign\">top<\/xsl:attribute>\r\n    <\/xsl:if>\r\n\r\n    <xsl:apply-templates\/>\r\n  <\/table>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:table-header\">\r\n  <thead>&add-style;\r\n    <xsl:apply-templates\/>\r\n  <\/thead>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:table-footer\">\r\n  <tfoot>&add-style;\r\n    <xsl:apply-templates\/>\r\n  <\/tfoot>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:table-body\">\r\n  <tbody>&add-style;\r\n    <xsl:apply-templates\/>\r\n  <\/tbody>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:table-row\">\r\n  <tr>&add-style;\r\n    <xsl:apply-templates mode=\"display\"\/>\r\n  <\/tr>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:table-cell\" mode=\"display\">\r\n  <td>&add-style;\r\n    <xsl:if test=\"not(@display-align)\">\r\n      <xsl:attribute name=\"valign\">top<\/xsl:attribute>\r\n    <\/xsl:if>\r\n    <xsl:apply-templates select=\"@*\" mode=\"get-table-attributes\"\/>\r\n    <xsl:apply-templates mode=\"check-for-pre\"\/>\r\n  <\/td>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:table-cell\" priority=\"-1\"\/>\r\n\r\n<!-- This template accounts for \"rowless\" tables -->\r\n<xsl:template priority=\"1\"\r\n              match=\"fo:table-cell[not(parent::fo:table-row)]\r\n              [not(preceding-sibling::fo:table-cell) or @starts-row=\'true\'\r\n               or preceding-sibling::fo:table-cell[1][@ends-row=\'true\']]\">\r\n  <tr>\r\n    <xsl:call-template name=\"enumerate-rowless-cells\"\/>\r\n  <\/tr>\r\n<\/xsl:template>\r\n\r\n<xsl:template name=\"enumerate-rowless-cells\">\r\n  <xsl:apply-templates select=\".\" mode=\"display\"\/>\r\n  <xsl:if test=\"not(@ends-row=\'true\')\">\r\n    <xsl:for-each select=\"following-sibling::fo:table-cell[1]\r\n                          [not(@starts-row=\'true\')]\">\r\n      <xsl:call-template name=\"enumerate-rowless-cells\"\/>\r\n    <\/xsl:for-each>\r\n  <\/xsl:if>\r\n<\/xsl:template>\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:inline-graphic                                               -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:external-graphic\">\r\n  <xsl:variable name=\"cleaned-url\">\r\n    <xsl:apply-templates select=\"@src\" mode=\"unbracket-url\"\/>\r\n  <\/xsl:variable>\r\n  &anchor;<img src=\"{$cleaned-url}\"><xsl:apply-templates select=\"@height|@width|@*[starts-with(name(),\'border\')]\"\/><\/img>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:basic-link                                                  -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:basic-link[@external-destination]\">\r\n\r\n  <xsl:variable name=\"cleaned-url\">\r\n    <xsl:apply-templates select=\"@external-destination\" mode=\"unbracket-url\"\/>\r\n  <\/xsl:variable>\r\n\r\n  &anchor;<a href=\"{$cleaned-url}\">&add-style;<xsl:apply-templates\/><\/a>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:basic-link[@internal-destination]\">\r\n  &anchor;<a href=\"#{@internal-destination}\">&add-style;<xsl:apply-templates\/><\/a>\r\n<\/xsl:template>\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- fo:marker\/fo:retrieve-marker                                    -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:marker\"\/>\r\n<xsl:template match=\"fo:marker\" mode=\"retrieve-marker\">\r\n  <xsl:apply-templates\/>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:retrieve-marker\">\r\n\r\n  <xsl:variable name=\"class-name\" select=\"@retrieve-class-name\"\/>\r\n  <xsl:variable name=\"matching-markers\"\r\n                select=\"ancestor::fo:page-sequence\/descendant::fo:marker[@marker-class-name=$class-name]\"\/>\r\n\r\n  <xsl:choose>\r\n    <xsl:when test=\"@retrieve-position=\'last-starting-within-page\'\r\n                 or @retrieve-position=\'last-ending-within-page\'\">\r\n      <xsl:apply-templates select=\"$matching-markers[position()=last()]\" mode=\"retrieve-marker\"\/>\r\n    <\/xsl:when>\r\n    <xsl:otherwise>\r\n      <xsl:apply-templates select=\"$matching-markers[1]\" mode=\"retrieve-marker\"\/>\r\n    <\/xsl:otherwise>\r\n  <\/xsl:choose>\r\n\r\n<\/xsl:template>\r\n\r\n\r\n\r\n\r\n\r\n<!-- *************************************************************** -->\r\n<!-- Treatment of attributes that are either identical to their CSS1 -->\r\n<!-- counterparts, of find an equivalent expression there            -->\r\n\r\n<!-- =============================================================== -->\r\n<!-- Default rule: copy CSS1 attributes and suppress all other       -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"@*\" priority=\"-2\" mode=\"collect-style-attributes\"\/>\r\n\r\n<xsl:template match=\"@color |\r\n                     @background |\r\n                     @background-color |\r\n                     @background-image |\r\n                     @background-position |\r\n                     @background-repeat |\r\n                     @padding |\r\n                     @padding-top |\r\n                     @padding-bottom |\r\n                     @padding-right |\r\n                     @padding-left |\r\n                     @margin |\r\n                     @margin-top |\r\n                     @margin-bottom |\r\n                     @margin-right |\r\n                     @margin-left |\r\n                     @border |\r\n                     @border-top |\r\n                     @border-bottom |\r\n                     @border-right |\r\n                     @border-left |\r\n                     @border-width |\r\n                     @border-top-width |\r\n                     @border-bottom-width |\r\n                     @border-right-width |\r\n                     @border-left-width |\r\n                     @border-color |\r\n                     @border-top-color |\r\n                     @border-bottom-color |\r\n                     @border-right-color |\r\n                     @border-left-color |\r\n                     @border-style |\r\n                     @border-top-style |\r\n                     @border-bottom-style |\r\n                     @border-right-style |\r\n                     @border-left-style |\r\n                     @letter-spacing |\r\n                     @word-spacing |\r\n                     @line-height |\r\n                     @font |\r\n                     @font-family |\r\n                     @font-size |\r\n                     @font-weight |\r\n                     @font-style |\r\n                     @font-variant |\r\n                     @vertical-align |\r\n                     @text-decoration |\r\n                     @text-indent |\r\n                     @text-transform\"\r\n                     mode=\"collect-style-attributes\">\r\n  <xsl:value-of select=\"name()\"\/>\r\n  <xsl:text>: <\/xsl:text>\r\n  <xsl:value-of select=\".\"\/>\r\n  <xsl:text>; <\/xsl:text>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Some attributes deserve special treatment -->\r\n\r\n<xsl:template match=\"@text-align\" mode=\"collect-style-attributes\">\r\n  <xsl:text>text-align: <\/xsl:text>\r\n  <xsl:choose>\r\n    <xsl:when test=\".=\'start\' or .=\'inside\'\">left<\/xsl:when>\r\n    <xsl:when test=\".=\'end\' or .=\'outside\'\">right<\/xsl:when>\r\n    <xsl:otherwise><xsl:value-of select=\".\"\/><\/xsl:otherwise>\r\n  <\/xsl:choose>\r\n  <xsl:text>; <\/xsl:text>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Handling writing-mode in borders, padding, and margins          -->\r\n<!-- This version presumes lr-tb writing mode only.                  -->\r\n\r\n<xsl:template match=\"@space-before.optimum |\r\n                     @space-before [not (..\/@space-before.optimum)] |\r\n                     @space-before.minimum [not (..\/@space-before.optimum) and not (..\/@space-before)] |\r\n                     @space-before.maximum [not (..\/@space-before.optimum) and not (..\/@space-before) and not (..\/@space-before.minimum)] |\r\n                     @space-after.optimum |\r\n                     @space-after [not (..\/@space-after.optimum)] |\r\n                     @space-after.minimum [not (..\/@space-after.optimum) and not (..\/@space-after)] |\r\n                     @space-after.maximum [not (..\/@space-after.optimum) and not (..\/@space-after) and not (..\/@space-after.minimum)] |\r\n                     @space-start.optimum |\r\n                     @space-start [not (..\/@space-start.optimum)] |\r\n                     @space-start.minimum [not (..\/@space-start.optimum) and not (..\/@space-start)] |\r\n                     @space-start.maximum [not (..\/@space-start.optimum) and not (..\/@space-start) and not (..\/@space-start.minimum)] |\r\n                     @space-end.optimum |\r\n                     @space-end [not (..\/@space-end.optimum)] |\r\n                     @space-end.minimum [not (..\/@space-end.optimum) and not (..\/@space-end)] |\r\n                     @space-end.maximum [not (..\/@space-end.optimum) and not (..\/@space-end) and not (..\/@space-end.minimum)] |\r\n                     @start-indent[not(parent::fo:list-item-body)] |\r\n                     @end-indent[not(parent::fo:list-item-label)] |\r\n                     @padding-before |\r\n                     @padding-before.length |\r\n                     @margin-before |\r\n                     @border-before |\r\n                     @border-before-width |\r\n                     @border-before-width.length |\r\n                     @border-before-color |\r\n                     @border-before-style |\r\n                     @padding-after |\r\n                     @padding-after.length |\r\n                     @margin-after |\r\n                     @border-after |\r\n                     @border-after-width |\r\n                     @border-after-width.length |\r\n                     @border-after-color |\r\n                     @border-after-style |\r\n                     @padding-start |\r\n                     @padding-start.length |\r\n                     @margin-start |\r\n                     @border-start |\r\n                     @border-start-width |\r\n                     @border-start-width.length |\r\n                     @border-start-color |\r\n                     @border-start-style |\r\n                     @padding-end |\r\n                     @padding-end.length |\r\n                     @margin-end |\r\n                     @border-end |\r\n                     @border-end-width |\r\n                     @border-end-width.length |\r\n                     @border-end-color |\r\n                     @border-end-style\"\r\n              mode=\"collect-style-attributes\">\r\n\r\n  <xsl:variable name=\"property\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"starts-with(name(), \'border\')\">border<\/xsl:when>\r\n      <xsl:when test=\"starts-with(name(), \'padding\')\">padding<\/xsl:when>\r\n      <xsl:when test=\"starts-with(name(), \'margin\')\">margin<\/xsl:when>\r\n      <xsl:when test=\"starts-with(name(), \'space\')\">margin<\/xsl:when>\r\n      <xsl:when test=\"contains(name(), \'-indent\')\">margin<\/xsl:when>\r\n    <\/xsl:choose>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:variable name=\"side\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"contains(name(), \'-before\') or contains(name(), \'-top\')\">-top<\/xsl:when>\r\n      <xsl:when test=\"contains(name(), \'-after\') or contains(name(), \'-bottom\')\">-bottom<\/xsl:when>\r\n      <xsl:when test=\"contains(name(), \'-start\') or starts-with(name(), \'start-\') or contains(name(), \'-left\')\">-left<\/xsl:when>\r\n      <xsl:when test=\"contains(name(), \'-end\') or starts-with(name(), \'end-\') or contains(name(), \'-right\')\">-right<\/xsl:when>\r\n    <\/xsl:choose>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:variable name=\"parameter\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"contains(name(), \'-width\')\">-width<\/xsl:when>\r\n      <xsl:when test=\"contains(name(), \'-color\')\">-color<\/xsl:when>\r\n      <xsl:when test=\"contains(name(), \'-style\')\">-style<\/xsl:when>\r\n    <\/xsl:choose>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:value-of select=\"concat($property, $side, $parameter)\"\/>\r\n  <xsl:text>: <\/xsl:text>\r\n  <xsl:value-of select=\".\"\/>\r\n  <xsl:text>; <\/xsl:text>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"*\" mode=\"check-for-pre\" priority=\"-1\">\r\n  <xsl:apply-templates select=\".\"\/>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"*[@white-space-collapse=\'false\'\r\n                    or @linefeed-treatment=\'preserve\'\r\n                    or @wrap-option=\'no-wrap\'\r\n                    or @white-space=\'pre\']\"\r\n                     mode=\"check-for-pre\">\r\n  <pre><xsl:apply-templates select=\".\"\/><\/pre>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Recalculate a length to pixels. 1 in = 96 px, 1 em = 1 pc;      -->\r\n<!-- this gives reasonable results for 800x600 and 1024x768 screens  -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"@*\" mode=\"convert-to-pixels\">\r\n  <xsl:variable name=\"scaling-factor\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"contains (., \'pt\')\">1.33<\/xsl:when>\r\n      <xsl:when test=\"contains (., \'px\')\">1<\/xsl:when>\r\n      <xsl:when test=\"contains (., \'pc\')\">16<\/xsl:when>\r\n      <xsl:when test=\"contains (., \'in\')\">96<\/xsl:when>\r\n      <xsl:when test=\"contains (., \'cm\')\">37.8<\/xsl:when>\r\n      <xsl:when test=\"contains (., \'mm\')\">3.78<\/xsl:when>\r\n      <xsl:when test=\"contains (., \'em\')\">16<\/xsl:when> <!-- guess: 1em = 12pt -->\r\n      <xsl:otherwise>1<\/xsl:otherwise>\r\n    <\/xsl:choose>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:variable name=\"numeric-value\"\r\n       select=\"translate (., \'-0123456789.ptxcinme\', \'-0123456789.\')\"\/>\r\n  <xsl:value-of select=\"$numeric-value * $scaling-factor\"\/>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Remove brackets & quotes around URLs                            -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"@*\" mode=\"unbracket-url\">\r\n  <xsl:variable name=\"href\" select=\"normalize-space(.)\"\/>\r\n\r\n  <xsl:choose>\r\n    <xsl:when test=\"(starts-with($href, \'url(\') or starts-with($href, \'url (\'))\r\n                     and substring ($href, string-length($href)) = \')\'\">\r\n      <!-- Remove \'url\' from the beginning -->\r\n      <xsl:variable name=\"bracketed\"\r\n           select=\"normalize-space(substring($href, 4))\"\/>\r\n      <!-- Remove brackets -->\r\n      <xsl:variable name=\"quoted\"\r\n           select=\"normalize-space(substring($bracketed, 2, string-length ($bracketed) - 2 ))\"\/>\r\n\r\n      <xsl:variable name=\"q\" select=\"\'&quot;\'\"\/>\r\n      <xsl:variable name=\"a\" select=\'\"&apos;\"\'\/>\r\n      <!-- Remove optional quotes -->\r\n      <xsl:choose>\r\n        <xsl:when test=\"( substring($quoted, 1, 1) = $q and\r\n                          substring($quoted, string-length($quoted), 1) = $q )\r\n                     or ( substring($quoted, 1, 1) = $a and\r\n                          substring($quoted, string-length($quoted), 1) = $a )\">\r\n          <xsl:value-of select=\"substring($quoted, 2, string-length($quoted) - 2)\"\/>\r\n        <\/xsl:when>\r\n        <xsl:otherwise><xsl:value-of select=\"$quoted\"\/><\/xsl:otherwise>\r\n      <\/xsl:choose>\r\n    <\/xsl:when>\r\n    <xsl:otherwise><xsl:value-of select=\".\"\/><\/xsl:otherwise>\r\n  <\/xsl:choose>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Page number - replace by a bullet                               -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:page-number | fo:page-number-citation\">\r\n  <span>&add-style;<xsl:text>&#x2022;<\/xsl:text><\/span>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Leader - replace by a space                                     -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:leader\">\r\n  <xsl:text> &#xA0;&#xA0;&#xA0; <\/xsl:text>\r\n<\/xsl:template>\r\n\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- Static content - add a <hr\/> before or after it                 -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:flow | fo:static-content\">\r\n  <xsl:param name=\"region\"\/>\r\n\r\n  <div>&add-style;&anchor;\r\n    <xsl:apply-templates select=\"$region\"\/>\r\n    <xsl:apply-templates\/>\r\n    <xsl:if test=\".\/\/fo:footnote\">\r\n      <br\/><hr\/>\r\n      <xsl:apply-templates select=\".\/\/fo:footnote\" mode=\"after-text\"\/>\r\n    <\/xsl:if>\r\n  <\/div>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Footnotes                                                       -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:footnote\">\r\n  <xsl:apply-templates select=\"fo:inline\"\/>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:footnote\" mode=\"after-text\">\r\n  <div>&add-style;&anchor;\r\n    <xsl:apply-templates select=\"fo:footnote-body\"\/>\r\n  <\/div>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Copy all CSS1-compatible attributes to \"style\" property         -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template name=\"add-style-attribute\">\r\n  <xsl:param name=\"orientation\" select=\"0\"\/>\r\n  <xsl:variable name=\"style\">\r\n    <xsl:apply-templates select=\"@*\" mode=\"collect-style-attributes\"\/>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:if test=\"string-length($style) &gt; 0\">\r\n    <xsl:attribute name=\"style\"><xsl:value-of select=\"normalize-space($style)\"\/><\/xsl:attribute>\r\n  <\/xsl:if>\r\n<\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Create an anchor                                                -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"@id\"><a name=\"{.}\"\/><\/xsl:template>\r\n\r\n<!-- =============================================================== -->\r\n<!-- Table cell geometry                                             -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"@*\" mode=\"get-table-attributes\" priority=\"-1\"\/>\r\n\r\n<xsl:template match=\"@number-columns-spanned\"\r\n                     mode=\"get-table-attributes\">\r\n  <xsl:attribute name=\"colspan\"><xsl:value-of select=\".\"\/><\/xsl:attribute>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"@number-rows-spanned\"\r\n                     mode=\"get-table-attributes\">\r\n  <xsl:attribute name=\"rowspan\"><xsl:value-of select=\".\"\/><\/xsl:attribute>\r\n<\/xsl:template>\r\n\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- Page layout: determine master name for the first page           -->\r\n<!-- =============================================================== -->\r\n\r\n<xsl:template match=\"fo:page-sequence-master\">\r\n  <xsl:apply-templates select=\"*[1]\"\/>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:single-page-master-reference\r\n                   | fo:repeatable-page-master-reference\">\r\n  <xsl:value-of select=\"@master-reference\"\/>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:repeatable-page-master-alternatives\">\r\n  <xsl:choose>\r\n    <xsl:when test=\"fo:conditional-page-master-reference[@page-position=\'first\']\">\r\n      <xsl:value-of select=\"fo:conditional-page-master-reference[@page-position=\'first\'][1]\/@master-reference\"\/>\r\n    <\/xsl:when>\r\n    <xsl:when test=\"fo:conditional-page-master-reference[@odd-or-even=\'odd\' and not (@blank-or-not-blank=\'blank\')]\">\r\n      <xsl:value-of select=\"fo:conditional-page-master-reference[@odd-or-even=\'odd\' and not (@blank-or-not-blank=\'blank\')][1]\/@master-reference\"\/>\r\n    <\/xsl:when>\r\n    <xsl:when test=\"fo:conditional-page-master-reference[not(@odd-or-even=\'even\') and not (@blank-or-not-blank=\'blank\')]\">\r\n      <xsl:value-of select=\"fo:conditional-page-master-reference[not(@odd-or-even=\'even\') and not (@blank-or-not-blank=\'blank\')][1]\/@master-reference\"\/>\r\n    <\/xsl:when>\r\n    <xsl:otherwise> <!-- cannot guess; take the first -->\r\n      <xsl:value-of select=\"fo:conditional-page-master-reference[1]\/@master-reference\"\/>\r\n    <\/xsl:otherwise>\r\n  <\/xsl:choose>\r\n<\/xsl:template>\r\n\r\n\r\n<!-- =============================================================== -->\r\n<!-- Header\/footer properties                                        -->\r\n<!-- =============================================================== -->\r\n\r\n\r\n<xsl:template match=\"@extent\">\r\n  <xsl:attribute name=\"width\"><xsl:apply-templates select=\".\" mode=\"convert-to-pixels\"\/><\/xsl:attribute>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"@width | @height\">\r\n  <xsl:attribute name=\"{name()}\"><xsl:apply-templates select=\".\" mode=\"convert-to-pixels\"\/><\/xsl:attribute>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:region-before | fo:region-after\">\r\n  <xsl:call-template name=\"get-area-attributes\"\/>\r\n\r\n  <!-- For header and footer, we suppress margins and padding -->\r\n  <xsl:variable name=\"style\">\r\n    <xsl:apply-templates\r\n          select=\"@*[not (starts-with (name(), \'margin\')\r\n                          or starts-with (name(), \'space\')\r\n                          or starts-with (name(), \'padding\'))]\"\r\n          mode=\"collect-style-attributes\">\r\n      <xsl:with-param name=\"orientation\" select=\"@reference-orientation\"\/>\r\n    <\/xsl:apply-templates>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:if test=\"string-length($style) &gt; 0\">\r\n    <xsl:attribute name=\"style\"><xsl:value-of select=\"normalize-space($style)\"\/><\/xsl:attribute>\r\n  <\/xsl:if>\r\n\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:region-body\">\r\n  <xsl:call-template name=\"get-area-attributes\"\/>\r\n\r\n  <!-- For region-body, we suppress margin attributes -->\r\n  <xsl:variable name=\"style\">\r\n    <xsl:apply-templates\r\n          select=\"@*[not (starts-with (name(), \'margin\')\r\n                          or starts-with (name(), \'space\'))]\"\r\n          mode=\"collect-style-attributes\">\r\n      <xsl:with-param name=\"orientation\" select=\"@reference-orientation\"\/>\r\n    <\/xsl:apply-templates>\r\n  <\/xsl:variable>\r\n\r\n  <xsl:if test=\"string-length($style) &gt; 0\">\r\n    <xsl:attribute name=\"style\"><xsl:value-of select=\"normalize-space($style)\"\/><\/xsl:attribute>\r\n  <\/xsl:if>\r\n<\/xsl:template>\r\n\r\n<xsl:template match=\"fo:region-start | fo:region-end\"\/>\r\n\r\n<xsl:template name=\"get-area-attributes\">\r\n  <xsl:attribute name=\"valign\">\r\n    <xsl:choose>\r\n      <xsl:when test=\"@display-align\"><xsl:value-of select=\"@display-align\"\/><\/xsl:when>\r\n      <xsl:otherwise>top<\/xsl:otherwise>\r\n    <\/xsl:choose>\r\n  <\/xsl:attribute>\r\n<\/xsl:template>\r\n\r\n<\/xsl:stylesheet>';
